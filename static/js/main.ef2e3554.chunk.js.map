{"version":3,"sources":["api/API_DATA.js","components/Comments.jsx","components/Users.jsx","components/Posts.jsx","components/SelectedPost.jsx","components/PostNavigation.jsx","components/Storage.js","index.js"],"names":["loadPosts","a","fetch","responsePosts","json","posts","loadUsers","responseUsers","users","connect","dispatch","handleDelete","data","type","value","comment","className","title","onClick","commentId","Users","userItem","name","username","email","Posts","state","showComment","this","props","post","currentComments","comments","filter","id","to","user","body","tabIndex","role","onKeyDown","setState","map","key","React","Component","SelectedPost","errorsMap","handleFormSubmit","event","preventDefault","Object","keys","length","setComment","Date","now","handleChange","target","exact","onSubmit","htmlFor","placeholder","onChange","PostNavigation","postsWithUsers","find","userId","setData","path","render","match","params","initialState","persistedState","serialaizedState","localStorage","getItem","JSON","parse","e","console","log","loadFromLocalStorage","store","createStore","action","subscribe","stringify","setItem","saveToLocalStorage","getState","Storage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ef2e3554.chunk.js","sourcesContent":["\nexport const loadPosts = async() => {\n  const urlPosts = 'https://jsonplaceholder.typicode.com/posts';\n  const responsePosts = await fetch(urlPosts);\n  const posts = await responsePosts.json();\n\n  return posts;\n};\n\nexport const loadUsers = async() => {\n  const urlUsers = 'https://jsonplaceholder.typicode.com/users';\n  const responseUsers = await fetch(urlUsers);\n  const users = await responseUsers.json();\n\n  return users;\n};\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst getMethods = dispatch => ({\n  handleDelete: data => dispatch({\n    type: 'DELETE_COMMENT',\n    value: data,\n  }),\n});\n\nconst Comments = ({ comment, handleDelete }) => (\n  <div className=\"comments\">\n\n    <b> Unknown: </b>\n    <p className=\"comment\">{comment.title}</p>\n\n    <div\n      className=\"delete-comment\"\n      onClick={() => handleDelete(comment.commentId)}\n    >\n      {' '}\n      Delete\n    </div>\n    \n  </div>\n);\n\nComments.propTypes = {\n  handleDelete: PropTypes.func,\n  comment: PropTypes.shape({\n    title: PropTypes.string,\n    commentId: PropTypes.number,\n  }).isRequired,\n};\n\nexport default connect(\n  null,\n  getMethods\n)(Comments);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Users = ({ userItem }) => (\n  <div className=\"user_information\">\n    <p>\n      <b>Name</b>\n      {' '}\n      {userItem.name}\n    </p>\n    <p>\n      <b>Nick name</b>\n      {' '}\n      {userItem.username}\n    </p>\n    <p>\n      <b>Email</b>\n      {' '}\n      {userItem.email}\n    </p>\n  </div>\n);\n\nUsers.propTypes = {\n  userItem: PropTypes.shape({\n    name: PropTypes.string,\n    username: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Users;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Comments from './Comments';\nimport Users from './Users';\n\nconst getData = state => ({\n  comments: state.comments,\n});\n\nclass Posts extends React.Component {\n  state = {\n    showComment: false,\n  }\n\n  render() {\n    const { post, comments } = this.props;\n\n    const currentComments = comments\n      .filter(comment => +(comment.id) === post.id);\n\n    return (\n      <div>\n\n        <li\n          className=\"post_list\"\n        >\n          <Link\n            className=\"post_list-link\"\n            to={`/ViewPost/post/${post.id}`}\n          >\n            <Users userItem={post.user} currentComments={currentComments} />\n\n            <p className=\"post_title\">\n              <b>Title</b>\n              {' '}\n              {post.title}\n            </p>\n\n            <p className=\"post_body\">{post.body}</p>\n\n          </Link>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onKeyDown={() => {}}\n            className=\"show_comments\"\n            onClick={() => this.setState(state => ({\n              showComment: !state.showComment,\n            }))}\n          >\n            <p className=\"view-comments\">\n              {this.state.showComment\n                ? 'Hide comments'\n                : 'View comments'}\n            </p>\n          </div>\n          {\n            this.state.showComment\n              ? currentComments.map(comment => (\n                <Comments key={comment.id} comment={comment} />))\n              : null\n          }\n        </li>\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n  comments: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    commentId: PropTypes.number,\n  }).isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string,\n    title: PropTypes.string,\n    user: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(\n  getData,\n  null,\n)(Posts);\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport React from 'react';\nimport Users from './Users';\nimport Comments from './Comments';\n\nconst getData = state => ({\n  posts: state.posts,\n  comments: state.comments,\n});\n\nconst getMethods = dispatch => ({\n  setComment: data => dispatch({\n    type: 'SET_COMMENT',\n    value: data,\n  }),\n});\n\nclass SelectedPost extends React.Component {\n  state = {\n    title: '',\n    errorsMap: {\n      title: '',\n    },\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const errorsMap = {};\n\n    this.setState((state) => {\n      if (!state.title) {\n        errorsMap.title = 'Enter comment, please';\n      }\n\n      if (Object.keys(errorsMap).length > 0) {\n        return { errorsMap };\n      }\n\n      this.props.setComment({\n        id: this.props.id,\n        commentId: Date.now(),\n        title: this.state.title,\n      });\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  handleChange = (event) => {\n    event.preventDefault();\n\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n      errorsMap: {\n        title: '',\n      },\n    });\n  }\n\n  render() {\n    const { posts, id, comments } = this.props;\n    const { title, errorsMap } = this.state;\n    const currentComments = comments\n      .filter(comment => +(comment.id) === posts[id - 1].id);\n\n    return (\n      <div>\n        <Link to=\"/\" exact className=\"back-btn\">\n          Back to Posts\n        </Link>\n\n        <div className=\"selected-post_list\">\n\n          <Users userItem={posts[id - 1].user} />\n\n          <p className=\"post_title\">\n            <b>Title</b>\n            {' '}\n            {posts[id - 1].title}\n          </p>\n\n          <p className=\"post_body\">{posts[id - 1].body}</p>\n\n          <p\n            className=\"post_comments\"\n          >\n            {currentComments.length }\n            {' '}\n            {currentComments.length < 2\n              ? 'Comment'\n              : 'Comments'\n            }\n          </p>\n\n          {currentComments.map(comment => (\n            <Comments key={comment.id} comment={comment} />\n          ))}\n        </div>\n\n        <form\n          onSubmit={this.handleFormSubmit}\n          className=\"form\"\n        >\n          <label htmlFor=\"form-input\">\n            <input\n              className=\"form-field_input\"\n              value={title}\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Enter comment\"\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <div className=\"form-field_error\">\n            {errorsMap.title && (<div>{errorsMap.title}</div>)}\n          </div>\n          \n        </form>\n      </div>\n    );\n  }\n}\n\nSelectedPost.propTypes = {\n  comments: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    commentId: PropTypes.number,\n  }).isRequired,\n  posts: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(\n  getData,\n  getMethods\n)(SelectedPost);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Route, NavLink } from 'react-router-dom';\nimport { loadPosts, loadUsers } from '../api/API_DATA';\nimport Posts from './Posts';\nimport SelectedPost from './SelectedPost';\nimport '../style/App.css';\n\nconst getData = state => ({\n  posts: state.posts,\n});\n\nconst getMethods = dispatch => ({\n  setData: data => dispatch({\n    type: 'SET_DATA',\n    value: data,\n  }),\n});\n\nclass PostNavigation extends React.Component {\n  async componentDidMount() {\n    const users = await loadUsers();\n    const posts = await loadPosts();\n\n    const postsWithUsers = posts.map(post => ({\n      ...post,\n      user: users.find(user => user.id === post.userId),\n    }));\n\n    this.props.setData(postsWithUsers);\n  }\n\n  render() {\n    const { posts } = this.props;\n\n    return (\n      <div>\n        <NavLink to=\"/\" exact />\n\n        <div className=\"App\">\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <div>\n                {posts.map(post => (\n                  <div>\n                    <Posts post={post} />\n                  </div>\n                ))}\n              </div>\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/ViewPost/post/:id?\"\n            render={({ match }) => (posts\n              ? (\n                <SelectedPost\n                  id={match.params.id}\n                />\n              )\n              : null)\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nPostNavigation.propTypes = {\n  posts: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(\n  getData,\n  getMethods\n)(PostNavigation);\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport PostNavigation from './PostNavigation';\n\nconst initialState = {\n  posts: [],\n  comments: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_DATA':\n      return {\n        ...state,\n        posts: action.value,\n      };\n\n    case 'SET_COMMENT':\n      return {\n        ...state,\n        comments: [\n          ...state.comments,\n          action.value,\n        ],\n      };\n\n    case 'DELETE_COMMENT':\n      return {\n        ...state,\n        comments: state.comments\n          .filter(comment => comment.commentId !== action.value),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst saveToLocalStorage = (state) => {\n  try {\n    const serialaizedState = JSON.stringify(state);\n\n    localStorage.setItem('state', serialaizedState);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst loadFromLocalStorage = () => {\n  try {\n    const serialaizedState = localStorage.getItem('state');\n\n    if (serialaizedState === null) { return undefined; }\n\n    return JSON.parse(serialaizedState);\n  } catch (e) {\n    console.log(e);\n\n    return undefined;\n  }\n};\n\nconst persistedState = loadFromLocalStorage();\n\nconst store = createStore(\n  reducer,\n  persistedState,\n);\n\nstore.subscribe(() => saveToLocalStorage(store.getState()));\n\nconst Storage = () => (\n  <Provider store={store}>\n    <PostNavigation />\n  </Provider>\n);\n\nexport default Storage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport Storage from './components/Storage';\n\nReactDOM.render(\n  <HashRouter>\n    <Storage />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}